dnl
dnl  Configuration input file for Squid
dnl
dnl  Duane Wessels, wessels@nlanr.net, February 1996 (autoconf v2.9)
dnl
dnl  $Id$
dnl
dnl
dnl
AC_INIT(src/main.c)
AC_CONFIG_HEADER(include/autoconf.h)
AC_REVISION($Revision$)dnl
AC_PREFIX_DEFAULT(/usr/local/squid)
AC_CONFIG_AUX_DIR(aux)

AC_CANONICAL_HOST

CRYPT_LIB=''

dnl use directory structure of cached as default (hack)
if test "$libexecdir" = '${exec_prefix}/libexec'; then
	libexecdir='${bindir}'
	localstatedir='${prefix}'

fi

if test -z "$CACHE_HTTP_PORT"; then
	CACHE_HTTP_PORT="3128"
fi
if test -z "$CACHE_ICP_PORT"; then
	CACHE_ICP_PORT="3130"
fi
if test -z "$CACHE_FTP_PORT"; then
	CACHE_FTP_PORT="3132"
fi

dnl Subsitutions
AC_SUBST(CACHE_HTTP_PORT)
AC_SUBST(CACHE_ICP_PORT)
AC_SUBST(CACHE_FTP_PORT)

AC_DEFINE_UNQUOTED(CONFIG_HOST_TYPE, "$host")

dnl Set default LDFLAGS
if test -z "$LDFLAGS"; then
	LDFLAGS="-g"
fi

PREST_CFLAGS="$CFLAGS"

dnl Check for GNU cc
AC_PROG_CC

dnl Warn if not using GNU cc
XXXCC=`echo $CC | awk '{print $1}'`
if test "`basename $XXXCC`" = "gcc"; then
	:
elif test "`basename $XXXCC`" = "shlicc"; then
	:
elif test "`basename $XXXCC`" = "shlicc2"; then
	:
else
        echo '**************************************************************';
        echo '**************************************************************';
        echo '**';
        echo '**   WARNING:  Squid is only guaranteed to compile with GNU cc.';
        echo "**   Currently, you're using $CC";
        echo '**';
        echo '**************************************************************';
        echo '**************************************************************';
	sleep 5
fi

dnl Set Default CFLAGS
if test -z "$PRESET_CFLAGS"; then
    if test "$GCC" = "yes"; then
        case "$host" in
        *-sun-sunos*|*m88k*)
    	    # sunos has too many warnings for this to be useful
	    # motorola too
    	    ;;
        *)
    	    CFLAGS="$CFLAGS -Wall"
    	    ;;
        esac
    fi

    dnl Check if ANSI compile options are needed
    dnl
    case "$host" in
	*-sgi-irix*)
		echo "Adding ANSI compile flags for IRIX..."
    		if test "$GCC" = "yes"; then
			[CFLAGS="$CFLAGS -ansi"]
		else
			[CFLAGS="$CFLAGS -D__STRICT_ANSI__"]
		fi
		;;
	*-hp-hpux*)
		echo "Disabling 'ranlib' for HP-UX..."
		RANLIB=":"
		;;
    esac
fi

dnl Set LDFLAGS
if test -z "$PRESET_LDFLAGS"; then
    if test "$GCC" = "yes"; then
        case "$host" in
        *)
    	    # nothing
	    ;;
        esac
    fi
fi

dnl Check for programs
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PATH_PROG(RM, rm, /bin/false)
AC_PATH_PROG(MV, mv, /bin/false)
AC_PATH_PROG(MKDIR, mkdir, /bin/false)
AC_PATH_PROG(LN, ln, cp)
AC_PATH_PROG(PERL, perl, /usr/local/bin/perl)


dnl Check for headers
AC_HEADER_DIRENT
AC_HEADER_STDC


AC_CHECK_HEADERS( \
	alloca.h \
	arpa/inet.h \
	arpa/nameser.h \
	bstring.h \
	config.h \
	crypt.h \
	ctype.h \
	errno.h \
	fcntl.h \
	grp.h \
	libc.h \
	malloc.h \
	memory.h \
	netdb.h \
	netinet/in.h \
	netinet/tcp.h \
	pwd.h \
	regex.h \
	resolv.h \
	signal.h \
	stdarg.h \
	stddef.h \
	stdio.h \
	stdlib.h \
	string.h \
	strings.h \
	sys/file.h \
	sys/param.h \
	sys/resource.h \
	sys/select.h\
	sys/socket.h \
	sys/stat.h \
	sys/syscall.h \
	sys/time.h \
	sys/types.h \
	sys/un.h \
	sys/wait.h \
	syslog.h \
	time.h \
	unistd.h \
	varargs.h \
)

AC_MSG_CHECKING(for tm->tm_gmtoff)
AC_TRY_COMPILE([#include <time.h>
#include <sys/time.h>],
[struct tm foo;
foo.tm_gmtoff = 0;],
[AC_DEFINE(HAVE_TM_GMTOFF)
AC_MSG_RESULT(yes)],
AC_MSG_RESULT(no))

AC_MSG_CHECKING(for extended mallinfo)
AC_TRY_COMPILE([#include <sys/types.h>
#include <malloc.h>],
[struct mallinfo foo;
foo.mxfast = 0;],
[AC_DEFINE(HAVE_EXT_MALLINFO)
AC_MSG_RESULT(yes)],
AC_MSG_RESULT(no))

dnl Check for typedefs
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)

dnl Check for special functions
AC_FUNC_ALLOCA

dnl Check for needed libraries
AC_CHECK_LIB(nsl, main)
AC_CHECK_LIB(socket, main)
AC_CHECK_LIB(malloc, main, [HAVE_LIBMALLOC="yes"; LIBS="$LIBS -lmalloc"])
AC_CHECK_LIB(resolv, main)
AC_CHECK_LIB(bsd, main)

dnl We found a version of libresolv on SunOS 4.x which requires -l44bsd
dnl We have to first check to see if -l44bsd is present and has the
dnl function inet_aton 
AC_CHECK_LIB(44bsd, inet_aton, [HAVE_LIB44BSD="yes"])
AC_CHECK_LIB(resolv, inet_aton, [if test "$HAVE_LIB44BSD" = "yes"; then LIBS="$LIBS -l44bsd"; fi])

dnl Check for libcrypt
dnl We use crypt(3) which may be in libc, or in libcrypt (eg FreeBSD)
AC_CHECK_LIB(crypt, crypt, [CRYPT_LIB="-lcrypt"])
AC_SUBST(CRYPT_LIB)

dnl System-specific library modifications
dnl
case "$host" in
	*-sun-solaris*)
        	echo "Removing -lmalloc for Solaris..."
        	LIBS=`echo $LIBS | sed -e s/-lmalloc//`
        	HAVE_LIBMALLOC="no"
		;;
	i386-*-solaris2.?)
    		if test "$GCC" = "yes"; then
			echo "Removing -O for gcc on $host"
			CFLAGS="`echo $CFLAGS | sed -e s/-O//`"
		fi
		;;
	i386-*-freebsd*)
        	echo "Removing -lmalloc for FreeBSD..."
        	LIBS=`echo $LIBS | sed -e s/-lmalloc//`
        	HAVE_LIBMALLOC="no"
		;;
	*-sgi-irix*)
        	echo "Removing -lsocket for IRIX..."
        	LIBS=`echo $LIBS | sed -e s/-lsocket//`
        	echo "Removing -lnsl for IRIX..."
        	LIBS=`echo $LIBS | sed -e s/-lnsl//`
		;;
esac

dnl Some O/S's don't have tzp arg to gettimeofday()
dnl
case "$host" in
	*m88k*)
		CFLAGS="$CFLAGS -D_SQUID_MOTOROLA_"
		AC_DEFINE(GETTIMEOFDAY_NO_TZP)
		;;
	*-*-solaris2.[0-4])
		AC_DEFINE(GETTIMEOFDAY_NO_TZP)
		;;
esac

dnl Check for library functions
AC_CHECK_FUNCS(\
	bcopy \
	getdtablesize \
	getrusage \
	lrand48 \
	mallinfo \
	mallopt \
	memmove \
	regcomp \
	regexec \
	regfree \
	res_init \
	seteuid \
	setpgrp \
	setresuid \
	setrlimit \
	setsid \
	sigaction \
	socketpair \
	srand48 \
	strdup \
	sysconf \
	syslog \
	tempnam \
	timegm \
)

AC_MSG_CHECKING(Maximum number of filedescriptors we can open)
AC_TRY_RUN([
#include <unistd.h>
#include <sys/time.h>	/* needed on FreeBSD */
#include <sys/param.h>
#include <sys/resource.h>
main() {
	int i,j;
#if HAVE_SETRLIMIT
    struct rlimit rl;
#if defined(RLIMIT_NOFILE)
    if (getrlimit(RLIMIT_NOFILE, &rl) < 0) {
        perror("getrlimit: RLIMIT_NOFILE");
    } else {
        rl.rlim_cur = rl.rlim_max;      /* set it to the max */
        if (setrlimit(RLIMIT_NOFILE, &rl) < 0) {
            perror("setrlimit: RLIMIT_NOFILE");
        }
    }
#elif defined(RLIMIT_OFILE)
    if (getrlimit(RLIMIT_OFILE, &rl) < 0) {
        perror("getrlimit: RLIMIT_OFILE");
    } else {
        rl.rlim_cur = rl.rlim_max;      /* set it to the max */
        if (setrlimit(RLIMIT_OFILE, &rl) < 0) {
            perror("setrlimit: RLIMIT_OFILE");
        }
    }
#endif /* RLIMIT_NOFILE */
#endif /* HAVE_SETRLIMIT */
#if HAVE_SYSCONF && defined(_SC_OPEN_MAX)
        i = sysconf(_SC_OPEN_MAX);
#elif HAVE_GETDTABLESIZE
        i = getdtablesize();
#elif defined(OPEN_MAX)
        i = OPEN_MAX;
#elif defined(NOFILE)
        i = NOFILE;
#elif defined(_NFILE)
        i = _NFILE;
#else
	while((j=open("/dev/null", 0)) > 0) i=j;
        close(i); close(i-1);
	i++;
#endif
	fprintf (fopen("conftestval", "w"), "%d\n", i);
	exit(0);
}
],
SQUID_FD_SETSIZE=`cat conftestval`,
SQUID_FD_SETSIZE=256,
SQUID_FD_SETSIZE=256)
AC_MSG_RESULT($SQUID_FD_SETSIZE)
AC_DEFINE_UNQUOTED(SQUID_FD_SETSIZE, $SQUID_FD_SETSIZE)

AC_MSG_CHECKING(Default UDP send buffer size)
AC_TRY_RUN([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
main ()
{
        int fd,val=0,len=sizeof(int);
	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) exit(1);
        if (getsockopt(fd, SOL_SOCKET, SO_SNDBUF, &val, &len) < 0) exit(1);
	if (val<=0) exit(1);
        fprintf (fopen("conftestval", "w"), "%d\n", val);
	exit(0);
}
],
SQUID_UDP_SO_SNDBUF=`cat conftestval`,
SQUID_UDP_SO_SNDBUF=8192,
SQUID_UDP_SO_SNDBUF=8192)
AC_MSG_RESULT($SQUID_UDP_SO_SNDBUF)
AC_DEFINE_UNQUOTED(SQUID_UDP_SO_SNDBUF, $SQUID_UDP_SO_SNDBUF)

AC_MSG_CHECKING(Default UDP receive buffer size)
AC_TRY_RUN([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
main ()
{
        int fd,val=0,len=sizeof(int);
	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) exit(1);
        if (getsockopt(fd, SOL_SOCKET, SO_RCVBUF, &val, &len) < 0) exit(1);
	if (val <= 0) exit(1);
        fprintf (fopen("conftestval", "w"), "%d\n", val);
	exit(0);
}
],
SQUID_UDP_SO_RCVBUF=`cat conftestval`,
SQUID_UDP_SO_RCVBUF=8192,
SQUID_UDP_SO_RCVBUF=8192)
AC_MSG_RESULT($SQUID_UDP_SO_RCVBUF)
AC_DEFINE_UNQUOTED(SQUID_UDP_SO_RCVBUF, $SQUID_UDP_SO_RCVBUF)

AC_MSG_CHECKING(Default TCP send buffer size)
AC_TRY_RUN([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
main ()
{
        int fd,val=0,len=sizeof(int);
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) exit(1);
        if (getsockopt(fd, SOL_SOCKET, SO_SNDBUF, &val, &len) < 0) exit(1);
	if (val <= 0) exit(1);
        fprintf (fopen("conftestval", "w"), "%d\n", val);
	exit(0);
}
],
SQUID_TCP_SO_SNDBUF=`cat conftestval`,
SQUID_TCP_SO_SNDBUF=8192,
SQUID_TCP_SO_SNDBUF=8192)
AC_MSG_RESULT($SQUID_TCP_SO_SNDBUF)
AC_DEFINE_UNQUOTED(SQUID_TCP_SO_SNDBUF, $SQUID_TCP_SO_SNDBUF)

AC_MSG_CHECKING(Default TCP receive buffer size)
AC_TRY_RUN([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
main ()
{
        int fd,val=0,len=sizeof(int);
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) exit(1);
        if (getsockopt(fd, SOL_SOCKET, SO_RCVBUF, &val, &len) < 0) exit(1);
	if (val <= 0) exit(1);
        fprintf (fopen("conftestval", "w"), "%d\n", val);
	exit(0);
}
],
SQUID_TCP_SO_RCVBUF=`cat conftestval`,
SQUID_TCP_SO_RCVBUF=8192,
SQUID_TCP_SO_RCVBUF=8192)
AC_MSG_RESULT($SQUID_TCP_SO_RCVBUF)
AC_DEFINE_UNQUOTED(SQUID_TCP_SO_RCVBUF, $SQUID_TCP_SO_RCVBUF)

AC_MSG_CHECKING(if sys_errlist[] is already defined)
AC_TRY_COMPILE([#include <stdio.h>],
[char *s = sys_errlist[0];],
AC_MSG_RESULT(yes),
[AC_MSG_RESULT(no)
AC_DEFINE(NEED_SYS_ERRLIST)])

dnl Need the debugging version of malloc if available
XTRA_OBJS=''
if test "$HAVE_LIBMALLOC" = "yes" ; then
	if test -r /usr/lib/debug/malloc.o ; then
		XTRA_OBJS="$XTRA_OBJS /usr/lib/debug/malloc.o"
	fi
	if test -r /usr/lib/debug/mallocmap.o ; then
		XTRA_OBJS="$XTRA_OBJS /usr/lib/debug/mallocmap.o"
	fi
fi
AC_SUBST(XTRA_OBJS)

XTRA_LIBS="$LIBS"
LIBS=''
AC_SUBST(XTRA_LIBS)


dnl Clean up after OSF/1 core dump bug
rm -f core 

AC_OUTPUT(\
	./makefile \
	./lib/Makefile \
	./include/config.h \
	./scripts/Makefile \
	./scripts/RunCache \
	./scripts/RunAccel \
	./src/Makefile \
	./src/squid.conf.pre \
)
