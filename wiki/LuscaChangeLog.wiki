#summary Changes between Lusca Versions

= Changes between Lusca-1.0 and Lusca-HEAD =

  * The AUFS and COSS storage rebuild logic has been re-implemented using external processes to improve performance and code clarity.
  * The client and server side socket buffer sizes are now separately tunable.
  * The async IO thread count is now configurable at run-time rather than compile time.
  * The async IO code has been moved into a separate library and tweaked to perform slightly better under load.
  * TPROXY2, TPROXY4 and FreeBSD TPROXY support has been added and is in production in a variety of sites. This all needs to be better documented though!

  * COSS will now start writing from the last known written stripe, rather than starting from the beginning of the disk.
  * A new cache_peer option has been added - "no-tproxy" - which forces the cache peer to ignore client-spoofing for connections to it and instead use the normal source address selection mechanism via tcp_outgoing_address.

= Changes between Squid-2.HEAD and Lusca-1.0 =

  * Squid-2 defaults to use async disk operations for disk read() / open() ; Lusca uses the async disk operations for -all- operations. This improves performance on FreeBSD/Solaris, where write() / close() may block more often than not.
  * Wide-scale source reorganisation into separate libraries - facilitating code modularity, code reuse and much easier unit testing.
  * An IPv4/IPv6 aware socket address type has been added - see libsqinet/ in the top-level source directory.
  * Various core modules have been prepared for IPv6 support - including core networking support and internal DNS routines.
  * An example single-threaded TCP proxy - see app/tcptest/ in the top-level source directory - which demonstrates re-using the core libraries in other applications.

= Changes between Lusca-1.0 and Lusca-HEAD =

  * COSS now does not write out swap log files which it doesn't use - improving performance during normal operation and logfile rotation.
  * The server-side code (src/http.c) has been restructured to remove extra data copying and in preparation for further improvements performance and memory utilisation.
  * The memory caching layer ("MemPools") has been turned into purely statistics - this is in preparation for fully threading the core libraries.
  * The majority of code which uses String has been adapted (and rewritten in some places) in preparation for reference counted string management.
  * The threaded IO code (via aufs) has been turned into a generic library for doing asynchronous IO. A new option exists for tweaking the number of IO threads to use - "n_aiops_threads" The default is to use 4 threads per AUFS storedir and 3 threads per COSS storedir.
  * The diskd and ufs storage types have been removed, leaving only aufs, coss and null. These types will return later on when the disk io layers have been tidied up and re-unified.
  * The ZPH code has been slightly reworked (in r14164 / issue 40) to make the evaluation order both clearer (it now is documented in the configuration file!) and hopefully more useful in production.