#summary The Cacheboy project roadmap.

= Cacheboy Roadmap =

*This is all a draft!*

== Release Map ==

The aim is to maintain and develop the Cacheboy derivative to meet performance, scalability and functionality demands in high-performance environments.

This roadmap covers approximately twelve months of development and testing time, if required funding is obtained.
The Squid-2.X releases indicate achievements made before the Cacheboy codebase branched from Squid-2.HEAD.

This is all very dynamic and can change at any time - feel free to browse the subversion history to see how this roadmap has evolved over time.

Adrian's ToDoList covers the changes Adrian has planned and is currently working on.

=== Squid-2.6 ===
This is the current "stable" release. No new features are planned at this time for inclusion into Squid-2.6.

=== Squid-2.7 ===
Squid-2.7 is a future release with the number of current and planned improvements:

  * Modular logging work - including external logging daemon support, UDP logging support *(Done)*
  * Work towards HTTP/1.1 compliance
  * Fixing (or at least working around) [http://www.squid-cache.org/bugs/show_bug.cgi?id=7 Bug #7]
  * Further transparent interception improvements from Steven Wilton *(Done)*
  * "store rewrite" stuff from Adrian Chadd - rewrite URLs when used for object storage and lookup; useful for caching sites with dynamic URLs with static content (eg Windows Updates, !YouTube, Google Maps, etc) as well as some CDN-like uses. *(Done)*
  * Removal of the dummy "null" store type and useless default cache_dir. *(Done)*
  * Include configuration file support *(Done)*

=== CACHEBOY_PRE (derived from Squid-2.HEAD) ===

This branch will focus on fixing any existing bugs in the initial codebase whilst perfoming some non-intrusive code restructuring to allow for further improvements.

Unless required, no large-scale changes will be made to the codebase until it has been verified in production.

  * Break out some code into seperate library modules, including documentation and some unit testing *(In Progress)*
   * memory management *(Done)*
   * debugging *(Done)*
   * buffers *(Done)*
   * strings *(Done)*
   * http request parsing
   * http reply construction
   * communication
  * Restructure the data paths:
    * Store -> Client buffer referencing *(Complete)*
  * Error page improvements - more professional-looking error pages and more descriptive/helpful messages. *(Complete for English - see "EnglishNew" pages)*

=== Cacheboy 1.0 (was Squid-2.8) ===

This will be the first stable release. Again, unless required, no large-scale changes will be made to the codebase until it has been verified in production.

=== Cacheboy 1.X ==

Cacheboy 1.X point releases will continue breaking out the code into seperate mostly self-contained modules with a minimum of reorganisation.

=== Cacheboy-1.3 ===

  * comm *(done)*
  * event scheduling *(done)*
  * fd management *(done)*
  * legacy blocking disk IO *(done)*

=== Cacheboy-1.4 ===

Preparation for IPv6 - complete refactoring out core network related code; begin modifications over to support IPv6 in the core libraries and leave the main Cacheboy application as IPv4 for now.

  * migrate out DNS code into libsqdns *(done)*
   * migrate ipc and helper out into libhelper *(done)*
   * migrate external and internal DNS into libsqdns *(done)*

=== Cacheboy-1.5 ===

Implement IPv6 support in core libraries. Cacheboy/Squid will still be an IPv4 only application but minimal changes will be made to ensure that the current IPv4-only code gets IPv4-only addresses.

  * Modify the base libraries to support IPv6 for communcation *(done)*
    * and dns
  * Modify Squid/Cacheboy application enough to support IPv4-only (and gracefully fail when IPv6 addresses appear where they shouldn't during conversions) *(done)*
  * Implement IPv6 test TCP proxy for testing basic IPv6 functionality *(done)*
  * Implement IPv6 DNS tests for testing basic IPv6 resolution functionality

=== Cacheboy-1.6 ===

Implement IPv6 support in the client-side.

  * Implement "tcp protocol" ACL to match on v4/v6/either for source / destination
  * Implement src6/dst6 IPv6 IP ACLs
  * Implement IPv6 http_port bindings
  * Ensure basic logging, forwarding, etc of IPv6 connections are correctly handled - eg, logging IPv6 addresses, X-Forwarded-For, etc.
  * IPv6 related changes for DNS related rules - this will be tricky!

=== Cacheboy 2.0 (was Squid-2.8) ===

This release concentrates on modularising existing code whilst improving performance. These changes should keep future developments in mind (HTTP/1.1, inline content processing, more efficient storage methods, threading.) The aim is to reduce user-space CPU usage (specifically, without ACL lookups - these can use a lot of CPU; these can be re-evaluated later.)

Adrian's seperate Squid-2 development branch (s27_adri) is showing 10-15% CPU usage improvement for in-memory workloads (ie, with no disk storage). Squid-2.8 should use ~20% to ~30% less CPU than Squid-2.6 / Squid-3.0 for memory-only workloads with minimal ACLs/refresh patterns. (Sorry - ACLs and refresh patterns are -very- expensive compared to the rest of the Squid codebase; especially if many regular expressions are involved.)

These changes pave the way for the next phase of performance improvements and HTTP/1.1 compliance.

With funding and available manpower, the bulk of these changes could be completed and included within ~3 months. 

The planned changes will include:

 * Client-side only IPv6 (ie, IPv6 clients connecting to Squid) - forwarding to IPv4 upstreams *(Will appear in Cacheboy-1.5)*
  * Specifically for accelerator setups (ie, gatewaying v6 clients to existing v4 setups) but this allows the initial IPv6 code to take shape without requiring the extensive support in HTTP and FTP forwarding that would be required for a full-blown IPv6 implementation.
 * Config include support *(Complete)*
 * Restructure the data paths:
  * Server -> Store buffer referencing *(Complete; not integrated)*
 * Restructure HTTP request and reply paths to take advantage of buffer referencing (Complete; not integrated)
 * Abstract out tproxy code into os-independant subroutines - aim to support tproxy-2 (Linux), tproxy-4 (Linux), upcoming FreeBSD support (which will be similar to the tproxy-4 method.)
 * Migrate internals to reference counted buffers rather than memcpy() / string copying *(Complete)*
 * Communications layer to seperate out SSL, TCP, (SCTP?), out of client/server side; and make Windows porting easier

=== Cacheboy 3.0 (was Squid-2.9) ===

Bring together all the changes in Cacheboy 1.0/Squid-2.8 and expand on the code restructuring. Again, don't try to change everything at once - restructure the code to provide the ability to improve things in the next release.
This release should bring in HTTP/1.1 support, enabled by improvements to the data flow in Cacheboy 1.0/Squid-2.8.

This release should focus on further modularisation and API changes to enable new functionality. Specific goals include:

 * Migrate to PCRE - this supports more regexp processing without having to convert string data to a NUL-terminated string
 * Seperate out client-side server-side code from caching logic
  * Allow for "other" code to use HTTP clients and servers, similar to Squid-3 but made much more generic
 * Message-based data flow model? - something enabling both HTTP/1.1 and inline content transformation
 * Investigate HTTP server-side IPv6 support and gatewaying
 * HTTP/1.1 support
 * Transfer/Content gzip encoding (if possible)
 * Memory and Disk storage changes
  * Split storage index lookup code to be fully asynchronous
  * Look at supporting sparse objects efficiently
  * Look at improvements for reading, writing, creating and deleting objects
  * Look at improved disk storage mechanisms for small and large object stores
  * Improve large memory object performance

Like the proposed Cacheboy 1.0; these changes should be feasible within a ~3 month timeframe. Again, these changes both build on Cacheboy 1.0 and provide the ability to improve functionality in the following release.

Finally, this release should begin looking at taking advantage of multiple processors. Specifically - threading Cacheboy as a whole is probably a bad goal; beginning to support concurrency in each seperate module is more realistic. (Note: Its entirely possible the best places to support concurrency with minimal changes to Squid proper is to support inline content modification, URL rewriting and ACL lookups in threads; these will most likely be the most CPU-heavy operations and would benefit the most from parallelism.)